// Code generated by mockery v2.32.4. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// AutoLoginState is an autogenerated mock type for the AutoLoginState type
type AutoLoginState struct {
	mock.Mock
}

type AutoLoginState_Expecter struct {
	mock *mock.Mock
}

func (_m *AutoLoginState) EXPECT() *AutoLoginState_Expecter {
	return &AutoLoginState_Expecter{mock: &_m.Mock}
}

// AutoLogin provides a mock function with given fields:
func (_m *AutoLoginState) AutoLogin() (bool, error) {
	ret := _m.Called()

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func() (bool, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AutoLoginState_AutoLogin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AutoLogin'
type AutoLoginState_AutoLogin_Call struct {
	*mock.Call
}

// AutoLogin is a helper method to define mock.On call
func (_e *AutoLoginState_Expecter) AutoLogin() *AutoLoginState_AutoLogin_Call {
	return &AutoLoginState_AutoLogin_Call{Call: _e.mock.On("AutoLogin")}
}

func (_c *AutoLoginState_AutoLogin_Call) Run(run func()) *AutoLoginState_AutoLogin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *AutoLoginState_AutoLogin_Call) Return(autoLogin bool, err error) *AutoLoginState_AutoLogin_Call {
	_c.Call.Return(autoLogin, err)
	return _c
}

func (_c *AutoLoginState_AutoLogin_Call) RunAndReturn(run func() (bool, error)) *AutoLoginState_AutoLogin_Call {
	_c.Call.Return(run)
	return _c
}

// HasSeen provides a mock function with given fields: event
func (_m *AutoLoginState) HasSeen(event string) bool {
	ret := _m.Called(event)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(event)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// AutoLoginState_HasSeen_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HasSeen'
type AutoLoginState_HasSeen_Call struct {
	*mock.Call
}

// HasSeen is a helper method to define mock.On call
//   - event string
func (_e *AutoLoginState_Expecter) HasSeen(event interface{}) *AutoLoginState_HasSeen_Call {
	return &AutoLoginState_HasSeen_Call{Call: _e.mock.On("HasSeen", event)}
}

func (_c *AutoLoginState_HasSeen_Call) Run(run func(event string)) *AutoLoginState_HasSeen_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *AutoLoginState_HasSeen_Call) Return(seen bool) *AutoLoginState_HasSeen_Call {
	_c.Call.Return(seen)
	return _c
}

func (_c *AutoLoginState_HasSeen_Call) RunAndReturn(run func(string) bool) *AutoLoginState_HasSeen_Call {
	_c.Call.Return(run)
	return _c
}

// MarkSeen provides a mock function with given fields: event
func (_m *AutoLoginState) MarkSeen(event string) {
	_m.Called(event)
}

// AutoLoginState_MarkSeen_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarkSeen'
type AutoLoginState_MarkSeen_Call struct {
	*mock.Call
}

// MarkSeen is a helper method to define mock.On call
//   - event string
func (_e *AutoLoginState_Expecter) MarkSeen(event interface{}) *AutoLoginState_MarkSeen_Call {
	return &AutoLoginState_MarkSeen_Call{Call: _e.mock.On("MarkSeen", event)}
}

func (_c *AutoLoginState_MarkSeen_Call) Run(run func(event string)) *AutoLoginState_MarkSeen_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *AutoLoginState_MarkSeen_Call) Return() *AutoLoginState_MarkSeen_Call {
	_c.Call.Return()
	return _c
}

func (_c *AutoLoginState_MarkSeen_Call) RunAndReturn(run func(string)) *AutoLoginState_MarkSeen_Call {
	_c.Call.Return(run)
	return _c
}

// SetAutoLogin provides a mock function with given fields: autoLogin
func (_m *AutoLoginState) SetAutoLogin(autoLogin bool) error {
	ret := _m.Called(autoLogin)

	var r0 error
	if rf, ok := ret.Get(0).(func(bool) error); ok {
		r0 = rf(autoLogin)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AutoLoginState_SetAutoLogin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetAutoLogin'
type AutoLoginState_SetAutoLogin_Call struct {
	*mock.Call
}

// SetAutoLogin is a helper method to define mock.On call
//   - autoLogin bool
func (_e *AutoLoginState_Expecter) SetAutoLogin(autoLogin interface{}) *AutoLoginState_SetAutoLogin_Call {
	return &AutoLoginState_SetAutoLogin_Call{Call: _e.mock.On("SetAutoLogin", autoLogin)}
}

func (_c *AutoLoginState_SetAutoLogin_Call) Run(run func(autoLogin bool)) *AutoLoginState_SetAutoLogin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bool))
	})
	return _c
}

func (_c *AutoLoginState_SetAutoLogin_Call) Return(err error) *AutoLoginState_SetAutoLogin_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *AutoLoginState_SetAutoLogin_Call) RunAndReturn(run func(bool) error) *AutoLoginState_SetAutoLogin_Call {
	_c.Call.Return(run)
	return _c
}

// NewAutoLoginState creates a new instance of AutoLoginState. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAutoLoginState(t interface {
	mock.TestingT
	Cleanup(func())
}) *AutoLoginState {
	mock := &AutoLoginState{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
