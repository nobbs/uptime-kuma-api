// Code generated by mockery v2.32.4. DO NOT EDIT.

package mocks

import (
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// Connection is an autogenerated mock type for the Connection type
type Connection struct {
	mock.Mock
}

type Connection_Expecter struct {
	mock *mock.Mock
}

func (_m *Connection) EXPECT() *Connection_Expecter {
	return &Connection_Expecter{mock: &_m.Mock}
}

// Ack provides a mock function with given fields: _a0, _a1, _a2
func (_m *Connection) Ack(_a0 string, _a1 time.Duration, _a2 ...interface{}) (interface{}, error) {
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _a2...)
	ret := _m.Called(_ca...)

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(string, time.Duration, ...interface{}) (interface{}, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(string, time.Duration, ...interface{}) interface{}); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(string, time.Duration, ...interface{}) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Connection_Ack_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ack'
type Connection_Ack_Call struct {
	*mock.Call
}

// Ack is a helper method to define mock.On call
//   - _a0 string
//   - _a1 time.Duration
//   - _a2 ...interface{}
func (_e *Connection_Expecter) Ack(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *Connection_Ack_Call {
	return &Connection_Ack_Call{Call: _e.mock.On("Ack",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *Connection_Ack_Call) Run(run func(_a0 string, _a1 time.Duration, _a2 ...interface{})) *Connection_Ack_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), args[1].(time.Duration), variadicArgs...)
	})
	return _c
}

func (_c *Connection_Ack_Call) Return(_a0 interface{}, _a1 error) *Connection_Ack_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Connection_Ack_Call) RunAndReturn(run func(string, time.Duration, ...interface{}) (interface{}, error)) *Connection_Ack_Call {
	_c.Call.Return(run)
	return _c
}

// Close provides a mock function with given fields:
func (_m *Connection) Close() {
	_m.Called()
}

// Connection_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type Connection_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *Connection_Expecter) Close() *Connection_Close_Call {
	return &Connection_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *Connection_Close_Call) Run(run func()) *Connection_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Connection_Close_Call) Return() *Connection_Close_Call {
	_c.Call.Return()
	return _c
}

func (_c *Connection_Close_Call) RunAndReturn(run func()) *Connection_Close_Call {
	_c.Call.Return(run)
	return _c
}

// On provides a mock function with given fields: _a0, _a1
func (_m *Connection) On(_a0 string, _a1 interface{}) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Connection_On_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'On'
type Connection_On_Call struct {
	*mock.Call
}

// On is a helper method to define mock.On call
//   - _a0 string
//   - _a1 interface{}
func (_e *Connection_Expecter) On(_a0 interface{}, _a1 interface{}) *Connection_On_Call {
	return &Connection_On_Call{Call: _e.mock.On("On", _a0, _a1)}
}

func (_c *Connection_On_Call) Run(run func(_a0 string, _a1 interface{})) *Connection_On_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(interface{}))
	})
	return _c
}

func (_c *Connection_On_Call) Return(_a0 error) *Connection_On_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Connection_On_Call) RunAndReturn(run func(string, interface{}) error) *Connection_On_Call {
	_c.Call.Return(run)
	return _c
}

// NewConnection creates a new instance of Connection. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConnection(t interface {
	mock.TestingT
	Cleanup(func())
}) *Connection {
	mock := &Connection{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
