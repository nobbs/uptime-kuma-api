// Code generated by mockery v2.32.4. DO NOT EDIT.

package mocks

import (
	state "github.com/nobbs/uptime-kuma-api/pkg/state"
	mock "github.com/stretchr/testify/mock"
)

// HeartbeatListState is an autogenerated mock type for the HeartbeatListState type
type HeartbeatListState struct {
	mock.Mock
}

type HeartbeatListState_Expecter struct {
	mock *mock.Mock
}

func (_m *HeartbeatListState) EXPECT() *HeartbeatListState_Expecter {
	return &HeartbeatListState_Expecter{mock: &_m.Mock}
}

// Heartbeats provides a mock function with given fields: monitorId
func (_m *HeartbeatListState) Heartbeats(monitorId int) ([]state.Heartbeat, error) {
	ret := _m.Called(monitorId)

	var r0 []state.Heartbeat
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]state.Heartbeat, error)); ok {
		return rf(monitorId)
	}
	if rf, ok := ret.Get(0).(func(int) []state.Heartbeat); ok {
		r0 = rf(monitorId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]state.Heartbeat)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(monitorId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HeartbeatListState_Heartbeats_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Heartbeats'
type HeartbeatListState_Heartbeats_Call struct {
	*mock.Call
}

// Heartbeats is a helper method to define mock.On call
//   - monitorId int
func (_e *HeartbeatListState_Expecter) Heartbeats(monitorId interface{}) *HeartbeatListState_Heartbeats_Call {
	return &HeartbeatListState_Heartbeats_Call{Call: _e.mock.On("Heartbeats", monitorId)}
}

func (_c *HeartbeatListState_Heartbeats_Call) Run(run func(monitorId int)) *HeartbeatListState_Heartbeats_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *HeartbeatListState_Heartbeats_Call) Return(beats []state.Heartbeat, err error) *HeartbeatListState_Heartbeats_Call {
	_c.Call.Return(beats, err)
	return _c
}

func (_c *HeartbeatListState_Heartbeats_Call) RunAndReturn(run func(int) ([]state.Heartbeat, error)) *HeartbeatListState_Heartbeats_Call {
	_c.Call.Return(run)
	return _c
}

// SetHeartbeats provides a mock function with given fields: monitorId, beats, overwrite
func (_m *HeartbeatListState) SetHeartbeats(monitorId int, beats []state.Heartbeat, overwrite bool) error {
	ret := _m.Called(monitorId, beats, overwrite)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, []state.Heartbeat, bool) error); ok {
		r0 = rf(monitorId, beats, overwrite)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// HeartbeatListState_SetHeartbeats_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetHeartbeats'
type HeartbeatListState_SetHeartbeats_Call struct {
	*mock.Call
}

// SetHeartbeats is a helper method to define mock.On call
//   - monitorId int
//   - beats []state.Heartbeat
//   - overwrite bool
func (_e *HeartbeatListState_Expecter) SetHeartbeats(monitorId interface{}, beats interface{}, overwrite interface{}) *HeartbeatListState_SetHeartbeats_Call {
	return &HeartbeatListState_SetHeartbeats_Call{Call: _e.mock.On("SetHeartbeats", monitorId, beats, overwrite)}
}

func (_c *HeartbeatListState_SetHeartbeats_Call) Run(run func(monitorId int, beats []state.Heartbeat, overwrite bool)) *HeartbeatListState_SetHeartbeats_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].([]state.Heartbeat), args[2].(bool))
	})
	return _c
}

func (_c *HeartbeatListState_SetHeartbeats_Call) Return(err error) *HeartbeatListState_SetHeartbeats_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *HeartbeatListState_SetHeartbeats_Call) RunAndReturn(run func(int, []state.Heartbeat, bool) error) *HeartbeatListState_SetHeartbeats_Call {
	_c.Call.Return(run)
	return _c
}

// NewHeartbeatListState creates a new instance of HeartbeatListState. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHeartbeatListState(t interface {
	mock.TestingT
	Cleanup(func())
}) *HeartbeatListState {
	mock := &HeartbeatListState{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
