// Code generated by mockery v2.32.4. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// HandlerRegistrator is an autogenerated mock type for the HandlerRegistrator type
type HandlerRegistrator struct {
	mock.Mock
}

type HandlerRegistrator_Expecter struct {
	mock *mock.Mock
}

func (_m *HandlerRegistrator) EXPECT() *HandlerRegistrator_Expecter {
	return &HandlerRegistrator_Expecter{mock: &_m.Mock}
}

// On provides a mock function with given fields: _a0, _a1
func (_m *HandlerRegistrator) On(_a0 string, _a1 interface{}) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// HandlerRegistrator_On_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'On'
type HandlerRegistrator_On_Call struct {
	*mock.Call
}

// On is a helper method to define mock.On call
//   - _a0 string
//   - _a1 interface{}
func (_e *HandlerRegistrator_Expecter) On(_a0 interface{}, _a1 interface{}) *HandlerRegistrator_On_Call {
	return &HandlerRegistrator_On_Call{Call: _e.mock.On("On", _a0, _a1)}
}

func (_c *HandlerRegistrator_On_Call) Run(run func(_a0 string, _a1 interface{})) *HandlerRegistrator_On_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(interface{}))
	})
	return _c
}

func (_c *HandlerRegistrator_On_Call) Return(_a0 error) *HandlerRegistrator_On_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *HandlerRegistrator_On_Call) RunAndReturn(run func(string, interface{}) error) *HandlerRegistrator_On_Call {
	_c.Call.Return(run)
	return _c
}

// NewHandlerRegistrator creates a new instance of HandlerRegistrator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHandlerRegistrator(t interface {
	mock.TestingT
	Cleanup(func())
}) *HandlerRegistrator {
	mock := &HandlerRegistrator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
