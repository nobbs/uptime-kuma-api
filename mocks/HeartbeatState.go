// Code generated by mockery v2.32.4. DO NOT EDIT.

package mocks

import (
	state "github.com/nobbs/uptime-kuma-api/pkg/state"
	mock "github.com/stretchr/testify/mock"
)

// HeartbeatState is an autogenerated mock type for the HeartbeatState type
type HeartbeatState struct {
	mock.Mock
}

type HeartbeatState_Expecter struct {
	mock *mock.Mock
}

func (_m *HeartbeatState) EXPECT() *HeartbeatState_Expecter {
	return &HeartbeatState_Expecter{mock: &_m.Mock}
}

// AppendHeartbeat provides a mock function with given fields: beat
func (_m *HeartbeatState) AppendHeartbeat(beat *state.Heartbeat) error {
	ret := _m.Called(beat)

	var r0 error
	if rf, ok := ret.Get(0).(func(*state.Heartbeat) error); ok {
		r0 = rf(beat)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// HeartbeatState_AppendHeartbeat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AppendHeartbeat'
type HeartbeatState_AppendHeartbeat_Call struct {
	*mock.Call
}

// AppendHeartbeat is a helper method to define mock.On call
//   - beat *state.Heartbeat
func (_e *HeartbeatState_Expecter) AppendHeartbeat(beat interface{}) *HeartbeatState_AppendHeartbeat_Call {
	return &HeartbeatState_AppendHeartbeat_Call{Call: _e.mock.On("AppendHeartbeat", beat)}
}

func (_c *HeartbeatState_AppendHeartbeat_Call) Run(run func(beat *state.Heartbeat)) *HeartbeatState_AppendHeartbeat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*state.Heartbeat))
	})
	return _c
}

func (_c *HeartbeatState_AppendHeartbeat_Call) Return(err error) *HeartbeatState_AppendHeartbeat_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *HeartbeatState_AppendHeartbeat_Call) RunAndReturn(run func(*state.Heartbeat) error) *HeartbeatState_AppendHeartbeat_Call {
	_c.Call.Return(run)
	return _c
}

// Heartbeats provides a mock function with given fields: monitorId
func (_m *HeartbeatState) Heartbeats(monitorId int) ([]state.Heartbeat, error) {
	ret := _m.Called(monitorId)

	var r0 []state.Heartbeat
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]state.Heartbeat, error)); ok {
		return rf(monitorId)
	}
	if rf, ok := ret.Get(0).(func(int) []state.Heartbeat); ok {
		r0 = rf(monitorId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]state.Heartbeat)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(monitorId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HeartbeatState_Heartbeats_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Heartbeats'
type HeartbeatState_Heartbeats_Call struct {
	*mock.Call
}

// Heartbeats is a helper method to define mock.On call
//   - monitorId int
func (_e *HeartbeatState_Expecter) Heartbeats(monitorId interface{}) *HeartbeatState_Heartbeats_Call {
	return &HeartbeatState_Heartbeats_Call{Call: _e.mock.On("Heartbeats", monitorId)}
}

func (_c *HeartbeatState_Heartbeats_Call) Run(run func(monitorId int)) *HeartbeatState_Heartbeats_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *HeartbeatState_Heartbeats_Call) Return(beats []state.Heartbeat, err error) *HeartbeatState_Heartbeats_Call {
	_c.Call.Return(beats, err)
	return _c
}

func (_c *HeartbeatState_Heartbeats_Call) RunAndReturn(run func(int) ([]state.Heartbeat, error)) *HeartbeatState_Heartbeats_Call {
	_c.Call.Return(run)
	return _c
}

// NewHeartbeatState creates a new instance of HeartbeatState. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHeartbeatState(t interface {
	mock.TestingT
	Cleanup(func())
}) *HeartbeatState {
	mock := &HeartbeatState{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
