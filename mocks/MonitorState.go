// Code generated by mockery v2.32.4. DO NOT EDIT.

package mocks

import (
	state "github.com/nobbs/uptime-kuma-api/pkg/state"
	mock "github.com/stretchr/testify/mock"
)

// MonitorState is an autogenerated mock type for the MonitorState type
type MonitorState struct {
	mock.Mock
}

type MonitorState_Expecter struct {
	mock *mock.Mock
}

func (_m *MonitorState) EXPECT() *MonitorState_Expecter {
	return &MonitorState_Expecter{mock: &_m.Mock}
}

// HasSeen provides a mock function with given fields: event
func (_m *MonitorState) HasSeen(event string) bool {
	ret := _m.Called(event)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(event)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MonitorState_HasSeen_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HasSeen'
type MonitorState_HasSeen_Call struct {
	*mock.Call
}

// HasSeen is a helper method to define mock.On call
//   - event string
func (_e *MonitorState_Expecter) HasSeen(event interface{}) *MonitorState_HasSeen_Call {
	return &MonitorState_HasSeen_Call{Call: _e.mock.On("HasSeen", event)}
}

func (_c *MonitorState_HasSeen_Call) Run(run func(event string)) *MonitorState_HasSeen_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MonitorState_HasSeen_Call) Return(seen bool) *MonitorState_HasSeen_Call {
	_c.Call.Return(seen)
	return _c
}

func (_c *MonitorState_HasSeen_Call) RunAndReturn(run func(string) bool) *MonitorState_HasSeen_Call {
	_c.Call.Return(run)
	return _c
}

// MarkSeen provides a mock function with given fields: event
func (_m *MonitorState) MarkSeen(event string) {
	_m.Called(event)
}

// MonitorState_MarkSeen_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarkSeen'
type MonitorState_MarkSeen_Call struct {
	*mock.Call
}

// MarkSeen is a helper method to define mock.On call
//   - event string
func (_e *MonitorState_Expecter) MarkSeen(event interface{}) *MonitorState_MarkSeen_Call {
	return &MonitorState_MarkSeen_Call{Call: _e.mock.On("MarkSeen", event)}
}

func (_c *MonitorState_MarkSeen_Call) Run(run func(event string)) *MonitorState_MarkSeen_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MonitorState_MarkSeen_Call) Return() *MonitorState_MarkSeen_Call {
	_c.Call.Return()
	return _c
}

func (_c *MonitorState_MarkSeen_Call) RunAndReturn(run func(string)) *MonitorState_MarkSeen_Call {
	_c.Call.Return(run)
	return _c
}

// SetMonitors provides a mock function with given fields: monitors
func (_m *MonitorState) SetMonitors(monitors map[int]*state.Monitor) error {
	ret := _m.Called(monitors)

	var r0 error
	if rf, ok := ret.Get(0).(func(map[int]*state.Monitor) error); ok {
		r0 = rf(monitors)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MonitorState_SetMonitors_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetMonitors'
type MonitorState_SetMonitors_Call struct {
	*mock.Call
}

// SetMonitors is a helper method to define mock.On call
//   - monitors map[int]*state.Monitor
func (_e *MonitorState_Expecter) SetMonitors(monitors interface{}) *MonitorState_SetMonitors_Call {
	return &MonitorState_SetMonitors_Call{Call: _e.mock.On("SetMonitors", monitors)}
}

func (_c *MonitorState_SetMonitors_Call) Run(run func(monitors map[int]*state.Monitor)) *MonitorState_SetMonitors_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(map[int]*state.Monitor))
	})
	return _c
}

func (_c *MonitorState_SetMonitors_Call) Return(err error) *MonitorState_SetMonitors_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MonitorState_SetMonitors_Call) RunAndReturn(run func(map[int]*state.Monitor) error) *MonitorState_SetMonitors_Call {
	_c.Call.Return(run)
	return _c
}

// NewMonitorState creates a new instance of MonitorState. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMonitorState(t interface {
	mock.TestingT
	Cleanup(func())
}) *MonitorState {
	mock := &MonitorState{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
