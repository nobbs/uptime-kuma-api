// Code generated by mockery v2.32.4. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// ConnectState is an autogenerated mock type for the ConnectState type
type ConnectState struct {
	mock.Mock
}

type ConnectState_Expecter struct {
	mock *mock.Mock
}

func (_m *ConnectState) EXPECT() *ConnectState_Expecter {
	return &ConnectState_Expecter{mock: &_m.Mock}
}

// Connected provides a mock function with given fields:
func (_m *ConnectState) Connected() (bool, error) {
	ret := _m.Called()

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func() (bool, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConnectState_Connected_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Connected'
type ConnectState_Connected_Call struct {
	*mock.Call
}

// Connected is a helper method to define mock.On call
func (_e *ConnectState_Expecter) Connected() *ConnectState_Connected_Call {
	return &ConnectState_Connected_Call{Call: _e.mock.On("Connected")}
}

func (_c *ConnectState_Connected_Call) Run(run func()) *ConnectState_Connected_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ConnectState_Connected_Call) Return(_a0 bool, _a1 error) *ConnectState_Connected_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConnectState_Connected_Call) RunAndReturn(run func() (bool, error)) *ConnectState_Connected_Call {
	_c.Call.Return(run)
	return _c
}

// SetConnected provides a mock function with given fields: _a0
func (_m *ConnectState) SetConnected(_a0 bool) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(bool) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ConnectState_SetConnected_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetConnected'
type ConnectState_SetConnected_Call struct {
	*mock.Call
}

// SetConnected is a helper method to define mock.On call
//   - _a0 bool
func (_e *ConnectState_Expecter) SetConnected(_a0 interface{}) *ConnectState_SetConnected_Call {
	return &ConnectState_SetConnected_Call{Call: _e.mock.On("SetConnected", _a0)}
}

func (_c *ConnectState_SetConnected_Call) Run(run func(_a0 bool)) *ConnectState_SetConnected_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bool))
	})
	return _c
}

func (_c *ConnectState_SetConnected_Call) Return(_a0 error) *ConnectState_SetConnected_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ConnectState_SetConnected_Call) RunAndReturn(run func(bool) error) *ConnectState_SetConnected_Call {
	_c.Call.Return(run)
	return _c
}

// NewConnectState creates a new instance of ConnectState. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConnectState(t interface {
	mock.TestingT
	Cleanup(func())
}) *ConnectState {
	mock := &ConnectState{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
